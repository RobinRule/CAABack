swagger: '2.0'
info:
  title: CAA Mgmt Project
  description: API for CAA management
  version: "1.0"
host: localhost:5000
schemes:
  - https
basePath: /api/v1
produces:
  - application/json

paths:
  /users/:
    post:
      summary: Create a new user
      description: Create a new user. This request will send out a invitation email to user's email address that provided in request. Created user will be automatically added as requester\'s superior
      parameters:
        - name: cognito-auth
          in: header
          type: string
          required: true
        - name: user
          in: body
          description: a case needed to be added to database
          required: true
          schema: { $ref: '#/definitions/CreateUserRequest'}
      tags:
        - Users
      responses:
        200:
          description: Request status or error msg
          schema: { $ref: '#/definitions/UserResponse'}

    put:
      summary: Update an existing user
      description: Update an existing user. Username in that user refers to which user you are updating, any attribute with a non-null value will be updated. Return will contain updated user.
      parameters:
        - name: cognito-auth
          in: header
          type: string
          required: true
        - name: user
          in: body
          description: Descripe user need to be updated
          required: true
          schema: { $ref: '#/definitions/User'}
      tags:
        - Users
      responses:
        200:
          description: Updated user or error msg.
          schema: {$ref: '#/definitions/UserResponse'}

  /users/{username}/:
    get:
      summary: Get a User by username
      description:
        This get request returns a user by the id specified username
      parameters:
        - name: cognito-auth
          in: header
          type: string
          required: true
        - name: username
          in: path
          description: an string username of user
          required: true
          type: string
      tags:
        - Users
      responses:
        200:
          description: Founded user or err msg
          schema: {$ref: '#/definitions/UserResponse'}

    post:
      summary: Search for user
      description: Search for usr's all superior user. By default the result is sorted by create time. Requester of this api can pass in a list of search specs to further refine the result. Relationship between different search spec is AND. In each search spec, you can specify the a specified val for the attr that you are searching for or you can specify the sorting order of returned result  you want . When multiple sorting order is specified, the one appears first takes a higher priority. An user is only allowed to search his own superiors and his team members\'s superiors. This request returns an transaction id and first page of superior user. When results are less than one page. transaction id will be null.
      tags:
        - Users
      parameters:
        - name: cognito-auth
          in: header
          type: string
          required: true
        - name: username
          in: path
          description: an string username of user
          required: true
          type: string
        - name: body
          in: body
          schema:
            properties:
              search_specs:
                type: array
                items:
                  $ref: '#/definitions/SearchSpec'
              window_size:
                type: integer
      responses:
        200:
          description: Contains an transaction id and first page
          schema: {$ref: '#/definitions/SearchUsersResponse'}

  /users/transaction/{transaction_id}/:
    get:
      summary: Get users by transaction id
      description: Consume an transaction id and get certain numbers of Users
      tags: 
        - Users
      parameters:
        - name: cognito-auth
          in: header
          type: string
          required: true
        - name: transaction_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: responses for get case
          schema: {$ref: '#/definitions/SearchUsersResponse'}
  
  /cases:
    post:
      summary: Create a new case
      description: Create a new case. Put the case you want to crreated in body. 
        userId is mandatory, all other field is optional. Response will have created caseId.
      parameters: 
        - name: case
          in: body
          description: a case needed to be added to database
          required: true
          schema: { $ref: '#/definitions/Case'}
      tags:
        - Cases
      responses:
        200:
          description: Case id of the new case
          schema: { $ref: '#/definitions/CaseIdResponse'}
          
    put:
      summary: Update an existing case
      description: Update an existing case by providing a case. Id in that case refers to which case you are updating, any attribute with a non-null value will be updated. Return will contain updated case.
      parameters: 
        - name: case
          in: body
          description: an integer id of case
          required: true
          schema: { $ref: '#/definitions/Case'}
      tags:
        - Cases
      responses:
        200:
          description: Case is updated sucessfully
          schema: {$ref: '#/definitions/CaseResponse'}

  /cases/attr_name/{attr_name}:
    get:
      summary: Get all possible attribute values for this attribute
      tags: 
        - Cases
      parameters: 
        - name: attr_name
          in: path
          required: true
          type: string
      responses:
        200:
          description: all possible attribute values
          schema: {$ref: '#/definitions/AtrributeValuesResponse'}

  /cases/{user_id}/{case_id}:
    delete:
      summary: delete a case by id
      description: delete a case refers by the given case id
      tags:
        - Cases
      parameters:
        - name: case_id
          in: path
          description: an integer id of case
          required: true
          type: integer
        - name: user_id
          in: path
          description: an integer id of user
          required: true
          type: integer
      responses:
        200:
          description: Case is deleted succesfully
          schema: {$ref: '#/definitions/BoolResponse'}
    get:
      summary: Get a case by id
      description:
        This get request returns a case by the id specified
      parameters:
        - name: case_id
          in: path
          description: an integer id of case
          required: true
          type: integer
        - name: user_id
          in: path
          description: an integer id of user
          required: true
          type: integer
      tags:
        - Cases
      responses:
        200:
          description: Case founded
          schema: {$ref: '#/definitions/CasesResponse'}

  /cases/{user_id}/:
    post:
      description: Search for usr's cases by id. By default the result is sorted by create time. User of this api can
        pass in a list of search specs to further refine the result. Relationship between different search spec is AND.
        In each search spec, you can specify the a specified val for the attr that you are searching for or you can specify
        you want the sorting order of returned result. When multiple sorting order is specified, the one appears first takes
        a higher priority.
        An user is only allowed to search his own cases and his team members' cases. This request returns an transaction id and first page of cases.
        When results are less than one page. transaction id will be null.
      tags:
        - Cases
      parameters:
        - name: user_id
          in: path
          required: true
          type: integer
        - name: body
          in: body
          schema:
            properties:
              search_specs:
                type: array
                items:
                  $ref: '#/definitions/SearchSpec'
              window_size:
                type: integer
      responses:
        200:
          description: Contains an transaction id
          schema: {$ref: '#/definitions/SearchCasesResponse'}

  /cases/transaction/{transaction_id}/:
    get:
      summary: Get cases by transaction id
      description: Consume an transaction id and get certain numbers of cases
      tags: 
        - Cases
      parameters: 
        - name: transaction_id
          in: path
          required: true
          type: string
      responses:
        200:
          description: responses for get case
          schema: {$ref: '#/definitions/GetCasesResponse'}
    
  /case_status/:
    get:
      summary: returns all defined case status
      tags: 
        - CaseStatus
      responses:
        200:
          description: OK
          schema: { $ref: '#/definitions/CasestatusResponse'}

    

definitions:
  Username:
    type: string

  User:
    type: object
    properties:
      username:
        $ref: '#/definitions/Username'
      nameFirst:
        type: string
      nameLast:
        type: string
      email:
        type: string
      superiors:
        type: array
        items:
          $ref: '#/definitions/Username'
      

  SearchTransacId:
    type: string

  CaseId:
    type: integer
  

  CaseStatusId:
    type: integer

  CaseStatus:
    type: object
    properties:
      nexts:
        type: array
        items: 
          type: string
      str_val:
        type: string
      id:
        $ref: '#/definitions/CaseStatusId'

  Case:
    type: object
    properties:
      caseId:
        $ref: '#/definitions/CaseId'
      userId:
        $ref: '#/definitions/Username'
      nameFirst:
        type: string
      nameLast:
        type: string
      contact:
        type: string
      statusId:
        $ref: '#/definitions/CaseStatusId'
      createTime:
        type: string
      closeTime:
        type: string

  ErrorType:
    type: string
    enum: 
      - ErrorNoSuchId
      - ErrorRequestIllFormated
  
  BoolResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      resullt:
        type: boolean

  CreateUserRequest:
    type: object
    properties:
      username:
        $ref: '#/definitions/Username'
      email:
        type: string

  UserResponse:
    type: object
    properties:
      content:
        $ref: '#/definitions/User'
      error:
        $ref: '#/definitions/ErrorType'
  SearchUsersResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      transaction_id:
        $ref: '#/definitions/SearchTransacId'
      Users:
        type: array
        items:
          $ref: '#/definitions/User'
  CaseIdResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      content:
        $ref: '#/definitions/CaseId'
  CaseResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      content:
        $ref: '#/definitions/Case'

  CasesResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      content:
        type: array
        items:
          $ref: '#/definitions/Case'

  CasestatusResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      content:
        type: array
        items:
          $ref: '#/definitions/CaseStatus'

  GetCasesResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      transaction_id:
        $ref: '#/definitions/SearchTransacId'
      cases:
        type: array
        items:
          $ref: '#/definitions/Case'

  AtrributeValuesResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      attribute_vals:
        type: array
        items:
          type: string

  SearchCasesResponse:
    type: object
    properties:
      error:
        $ref: '#/definitions/ErrorType'
      transaction_id:
        $ref: '#/definitions/SearchTransacId'
      cases:
        type: array
        items:
          $ref: '#/definitions/Case'
  SearchSpec:
    type: object
    properties:
      attr_name:
        type: string
      attr_val:
        type: string
      descending:
        type: boolean
